{"version":3,"sources":["grid.scss","components/_desktop.scss","components/_mixin.scss"],"names":[],"mappings":"AAAA;;;;;;EAME;AAGF;;;;;;EAME;AA+BF;EACE,WAAW;EACX,UAAU;EACV,UAAU;EACV,uBAAuB,EACxB;;AAED;EACE,eAAe;EACf,WAAW,EAQZ;EANC;IAJF;MAKI,WAAW,EAKd,EAAA;EAHC;IAPF;MAQI,WAAW,EAEd,EAAA;;AAED;EACE,kBAAe;EACf,mBAAgB,EACjB;;AAED;EAEI,YAAY;EACZ,eAAwB,EACzB;;AAJH;EAOI,aAAa;EACb,eAAe;EACf,YAAY,EACb;;ACzEH;ECQM,aAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,YAAiB,EAClB;;ADTL;ECQM,gBAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,iBAAiB,EAClB;;ADTL;ECQM,YAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,WAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,aAAiB,EAClB;;ADTL;ECQM,cAAiB,EAClB;;ADTL;ECQM,YAAiB,EAClB;;ADOL;EAwCE;IChDI,aAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,YAAiB,EAClB;ED+CH;IChDI,gBAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,iBAAiB,EAClB;ED+CH;IChDI,YAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,WAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,aAAiB,EAClB;ED+CH;IChDI,cAAiB,EAClB;ED+CH;IChDI,YAAiB,EAClB,EAAA;;AD0EL;EAyCE;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,YAAiB,EAClB;EDmHH;ICpHI,gBAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,iBAAiB,EAClB;EDmHH;ICpHI,YAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,WAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,aAAiB,EAClB;EDmHH;ICpHI,cAAiB,EAClB;EDmHH;ICpHI,YAAiB,EAClB,EAAA;;AD8IL;EA6BE;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,YAAiB,EAClB;ED2KH;IC5KI,gBAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,iBAAiB,EAClB;ED2KH;IC5KI,YAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,WAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,aAAiB,EAClB;ED2KH;IC5KI,cAAiB,EAClB;ED2KH;IC5KI,YAAiB,EAClB,EAAA","file":"grid.css","sourcesContent":["/**\n* Grid\n*\n* Simple grid built with scss.\n*\n* Philippe Marr - philippe.marr@gmail.com\n*/\n\n\n/**\n* Grid setup\n*\n* $grids will inform the grid loops how many columns there should be and how many grids.\n* $gutter-width will inform the grid loops how big each column's gutters should be.\n*\n*/\n\n// Number of grids / grid columns.\n$grids: (8, 12, 16) !default;\n\n// Breakpoints\n$BP-large: 1025px !default;\n$BP-medium: 770px !default;\n$BP-small: 600px !default;\n\n// Gutter width\n$gutter-width: 10px !default;\n\n// Moblie First\n$moblie_first: false !default;\n\n// Push and pull\n//\n// This will give you offsets left and right.\n$offsets: false !default;\n\n// Automatic grid\n//\n// This will do some common grid width changes automatically. Use class '.auto-grid' on the '.row'\n$auto-grid: false !default;\n\n\n\n\n\n\n* {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  box-sizing: border-box;\n}\n\n.section {\n  margin: 0 auto;\n  width: 90%;\n\n  @media (max-width: $BP-large) {\n    width: 95%;\n  }\n  @media (max-width: $BP-small) {\n    width: 98%;\n  }\n}\n\n.section .row {\n  margin-left: (-1 * $gutter-width / 2);\n  margin-right: (-1 * $gutter-width / 2);\n}\n\n.row {\n  [class^=\"col-\"] {\n    float: left;\n    padding: 0 $gutter-width / 2;\n  }\n\n  &:after {\n    content: \" \";\n    display: table;\n    clear: both;\n  }\n}\n\n\n@import \"components/_mixin.scss\";\n\n\n@if $moblie_first{\n\n  @import \"components/_moblie.scss\";\n\n} @else {\n\n  @import \"components/_desktop.scss\";\n\n}\n","// Desktop First layout\n\n\n\n// Desktop\n$Desktop: ();\n\n.row {\n  @each $grid in $grids {\n    @for $i from 1 through $grid {\n      $width: $i / $grid;\n\n      @include the_extends($width, $Desktop, null);\n\n      @include the_classes($i, $grid, $width, null);\n\n    }\n  }\n}\n// Desktop end\n\n\n// Large Breakpoint\n@media (max-width: $BP-large) {\n  //  Auto Desktop\n  @if $auto-grid {\n    $large_Auto: ();\n\n    .auto-grid {\n      @each $grid in $grids {\n        @for $i from 1 through $grid {\n          $width: $i / $grid;\n\n          @if 1 / 3 == $i / $grid {\n            @if contains($large_Auto, $width) == false {\n              %a-50-col-#{$width} {\n                width: 50%;\n              }\n              $large_Auto: append($large_Auto, $width);\n            }\n            .col-#{$i}-#{$grid} {\n              @extend %a-50-col-#{$width};\n            }\n          }\n\n          @if 1 / 4 == $i / $grid {\n            @if contains($large_Auto, $width) == false {\n              %a-33-col-#{$width} {\n                width: 33%;\n              }\n              $large_Auto: append($large_Auto, $width);\n            }\n            .col-#{$i}-#{$grid} {\n              @extend %a-33-col-#{$width};\n            }\n          }\n\n        }\n      }\n    }\n  }\n  // Auto Desktop end\n\n  .row {\n    $large: ();\n\n    @each $grid in $grids {\n      @for $i from 1 through $grid {\n        $width: $i / $grid;\n\n        @include the_extends($width, $large, \"l\" );\n\n        @include the_classes($i, $grid, $width, \"l\");\n\n      }\n    }\n\n    @if $offsets {\n      .col-l-push-reset, .col-l-pull-reset {\n        margin-left: none;\n      }\n    }\n\n  }\n}\n// Large end\n\n\n\n// Medium\n@media (max-width: $BP-medium) {\n\n  // Auto Desktop\n  @if $auto-grid {\n    $medium_Auto: ();\n\n    .auto-grid {\n      @each $grid in $grids {\n        @for $i from 1 through $grid {\n          $width: $i / $grid;\n\n          @if 1 / 3 == $i / $grid {\n            @if contains($medium_Auto, $width) == false {\n              %a-100-col-#{$width} {\n                width: 100%;\n              }\n              $medium_Auto: append($medium_Auto, $width);\n            }\n            .col-#{$i}-#{$grid} {\n              @extend %a-100-col-#{$width};\n            }\n          }\n\n          @if 1 / 4 == $i / $grid {\n            @if contains($medium_Auto, $width) == false {\n              %a-50-col-#{$width} {\n                width: 50%;\n              }\n              $medium_Auto: append($medium_Auto, $width);\n            }\n            .col-#{$i}-#{$grid} {\n              @extend %a-50-col-#{$width};\n            }\n          }\n\n        }\n      }\n    }\n  }\n  // Auto Desktop end\n\n  .row {\n    $medium: ();\n\n    @each $grid in $grids {\n      @for $i from 1 through $grid {\n        $width: $i / $grid;\n\n        @include the_extends($width, $medium, \"m\" );\n\n        @include the_classes($i, $grid, $width, \"m\");\n\n      }\n    }\n\n    @if $offsets {\n      .col-m-push-reset, .col-m-pull-reset {\n        margin-left: none;\n      }\n    }\n\n  }\n}\n// Medium end\n\n\n\n// Small\n@media (max-width: $BP-small) {\n\n  // Auto Desktop\n  @if $auto-grid {\n    $small_Auto: ();\n\n    .auto-grid {\n      @each $grid in $grids {\n        @for $i from 1 through $grid {\n          $width: $i / $grid;\n\n          @if 1 / 4 == $i / $grid {\n            @if contains($small_Auto, $width) == false {\n              %a-100-col-#{$width} {\n                width: 100%;\n              }\n              $small_Auto: append($small_Auto, $width);\n            }\n            .col-#{$i}-#{$grid} {\n              @extend %a-100-col-#{$width};\n            }\n          }\n\n        }\n      }\n    }\n  }\n  // Auto Desktop end\n\n  .row {\n    $small: ();\n\n    @each $grid in $grids {\n      @for $i from 1 through $grid {\n        $width: $i / $grid;\n\n        @include the_extends($width, $small, \"s\" );\n\n        @include the_classes($i, $grid, $width, \"s\");\n\n      }\n    }\n\n    @if $offsets {\n      .col-push-reset, .col-pull-reset{\n          margin-left: none;\n      }\n    }\n\n  }\n}\n// Small end\n","\n// Function to check if value (width) has already been listed.\n@function contains($list, $var) {\n  $_out: false;\n  @each $item in $list { @if $item == $var { $_out: true; } }\n  @return $_out;\n}\n\n\n// This is to extend common grid widths e.g. .col-3-12, .col-4-16 { width: 25%; }.\n// As a result the css will be more condense.\n@mixin the_extends($width, $list, $BP) {\n\n  @if contains($list, $width) == false {\n    %col-#{$BP}-#{$width} {\n      width: percentage( $width );\n    }\n    %push-#{$BP}-#{$width} {\n      margin-left: percentage( $width );\n    }\n    %pull-#{$BP}-#{$width} {\n      margin-left: -(percentage( $width ));\n    }\n\n    $list: append($list, $width);\n  }\n\n}\n\n@mixin the_classes($i, $grid, $width, $BP) {\n\n  .col-#{$BP}-#{$i}-#{$grid} {\n    @extend %col-#{$BP}-#{$width};\n  }\n\n  @if $offsets {\n    .col-#{$BP}-push-#{$i}-#{$grid} {\n      @extend %push-#{$BP}-#{$width};\n    }\n    .col-#{$BP}-pull-#{$i}-#{$grid} {\n      $width: $i / $grid;\n      @extend %pull-#{$BP}-#{$width};\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}